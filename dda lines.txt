#include <iostream>
#include <GL/glut.h>
#include <cmath>
#define ROUND(X) ((int)(X + 0.5))
using namespace std;

int w = 640, h = 480;
int algorithm = 0; // 0 - none, 1 - DDA, 2 - BH
int line_type = 0; // 1 - simple, 2 - dashed, 3 - dotted, 4 - solid

// Forward declarations
void draw();
void init();

// Drawing line
void DDA(float x1, float y1, float x2, float y2, int type);
void BH(float x1, float y1, float x2, float y2, int type);

void init() {
    glClearColor(1, 1, 1, 0);
    glColor3f(0, 0, 0);
    glPointSize(4.0);
    gluOrtho2D(-w / 2, w / 2, -h / 2, h / 2);
}

void plot(float x, float y, float size = 4.0) {
    glPointSize(size);
    glBegin(GL_POINTS);
    glVertex2f(ROUND(x), ROUND(y));
    glEnd();
}

void DDA(float x1, float y1, float x2, float y2, int type) {
    float dx = x2 - x1, dy = y2 - y1;
    int steps = abs(dx) >= abs(dy) ? abs(dx) : abs(dy);
    float xinc = dx / steps, yinc = dy / steps;
    float x = x1, y = y1;

    for (int i = 0; i <= steps; ++i) {
        bool draw = false;
        switch (type) {
            case 1: draw = true; break;
            case 2: draw = (i % 20 < 10); break;
            case 3: draw = (i % 10 == 0); break;
            case 4: draw = true; break;
        }
        if (draw) plot(x, y, type == 4 ? 8 : 4);
        x += xinc;
        y += yinc;
    }
    glFlush();
}

void BH(float x1, float y1, float x2, float y2, int type) {
    int dx = x2 - x1, dy = y2 - y1;
    int p = 2 * dy - dx, x = x1, y = y1;

    for (int i = 0; x <= x2; ++x, ++i) {
        bool draw = false;
        switch (type) {
            case 1: draw = true; break;
            case 2: draw = (i % 12 < 6); break;
            case 3: draw = (i % 10 == 0); break;
            case 4: draw = true; break;
        }
        if (draw) plot(x, y, type == 4 ? 8 : 4);
        if (p < 0)
            p += 2 * dy;
        else {
            y++;
            p += 2 * (dy - dx);
        }
    }
    glFlush();
}

void draw_axes() {
    glBegin(GL_LINES);
    glVertex2f(-w / 2, 0); glVertex2f(w / 2, 0);
    glVertex2f(0, -h / 2); glVertex2f(0, h / 2);
    glEnd();
}

void draw() {
    glClear(GL_COLOR_BUFFER_BIT);
    draw_axes();

    if (algorithm == 1)
        DDA(10, 50, 150, 200, line_type);
    else if (algorithm == 2)
        BH(10, 50, 150, 200, line_type);

    glFlush();
}

// Menu functions
void dda_menu(int option) {
    algorithm = 1;
    line_type = option;
    glutPostRedisplay();
}

void bh_menu(int option) {
    algorithm = 2;
    line_type = option;
    glutPostRedisplay();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("DDA and Bresenham Line Drawing");
    init();

    glutDisplayFunc(draw);

    // Submenus
    int ddaSubmenu = glutCreateMenu(dda_menu);
    glutAddMenuEntry("Simple", 1);
    glutAddMenuEntry("Dashed", 2);
    glutAddMenuEntry("Dotted", 3);
    glutAddMenuEntry("Solid", 4);

    int bhSubmenu = glutCreateMenu(bh_menu);
    glutAddMenuEntry("Simple", 1);
    glutAddMenuEntry("Dashed", 2);
    glutAddMenuEntry("Dotted", 3);
    glutAddMenuEntry("Solid", 4);

    // Main menu
    int mainMenu = glutCreateMenu(NULL);
    glutAddSubMenu("DDA Algorithm", ddaSubmenu);
    glutAddSubMenu("Bresenham Algorithm", bhSubmenu);

    glutAttachMenu(GLUT_RIGHT_BUTTON);
    glutMainLoop();
    return 0;
}